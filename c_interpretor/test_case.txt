

变量作用域确定:
int a;

void f(int b, int c) {
    int d;
}

int e;

有参的函数调用:
void f(int a, int b) {
    int c;
    c = a + b;
}

void main() {
    f(1, 2);
}

return 语句的解析执行:
int f() {
    int a;
    a = 1;
    return a;

    a = 2;
}

int f2() {
    return f();
}

void main() {
    f2();
}

库函数调用:
void main() {
    int a;
    a = 1;
    printf("a is :%d", a);
}

while 和 do while :
int a[3];

void main() {
    int i;
    i = 0;
    while (i < 3) {
        a[i] = i;
        i++;
    }
    i = 0;
    do {
        printf("%d", a[i]);
        i++;
    } while (i < 3);
}

递归调用(主要测试局部变量的状态，f调用前后打印的a和i的值应该不会变，但由于所有的变量只在符号表里存有唯一的拷贝，所有对这个名字的改动都会有全局的影响，如果没处理会导致a和i这两个局部变量在递归调用时会被修改):
void f(int i) {
    int a;
    a = i;
    if (i <= 0) {
        return;
    }

    printf("before call, local variable are: i:%d, a:%d", i, a);

    f(i-1);

    printf("after call, local variable are: i:%d, a:%d", i, a);
}

void main() {
    f(1);
}

复杂程序执行，简化版快速排序:
int a[5];

void init() {
    int i;
    for (i = 0; i < 5; i++) {
        a[i] = (4-i);
    }
}

void quickSort(int begin, int end) {
    if (begin >= end) {
        printf("begin >= end, return");
        return;
    }

    int v;
    int p;
    p = (begin + end)/2;
    v = a[p];
    int b;
    int e;
    b = begin;
    e = end;

    while (b<e) {
        int temp;
        if (a[b]>v) {
            temp = a[e];
            a[e] = a[b];
            a[b] = temp;
            e--;
        } else {
            b++;
        }
    }

    printf("call quickSort in left part with begin: %d, end: %d", begin, p);
    quickSort(begin, p);

    printf("call quickSort with right part begin: %d, end: %d", p+1, end);
    quickSort(p+1, end);
}

void main() {
    init();
    quickSort(0, 4);

    int i;
    i = 0;
    printf("Array after sorted is: ");
    do {
        printf("%d", a[i]);
        i++;
    } while (i<5);
}

malloc 动态内存分配和读写:
void main() {
    char *p;
    p = malloc(2);
    printf("addr of p is : %d", p);

    p[0] = 1;
    p[1] = 2;

    printf("p[0] is : %d, p[1] is : %d", p[0], p[1]);
}